tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - plugin:cloudify-diamond-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-aws-plugin
  - imports/kubernetes.yaml
  - imports/cloud-config.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_secret: centos_core_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ec2-user

  dashboard_ip:
    default: { get_attribute: [ kubernetes_master_ip, aws_resource_id ] }

  ks_node_dep_archive:
    default: http://repository.cloudifysource.org/cloudify/wagons/kubernetes-node-blueprints/master/kubernetes-node-blueprints-master.zip

  ks_load_dep_archive:
    default: http://repository.cloudifysource.org/cloudify/wagons/kubernetes-lb-blueprints/master/kubernetes-lb-blueprints-master.zip

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

  k8s_master_host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: ssh_group
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: kubernetes_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: kubernetes_master_ip
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  kubernetes_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Kubernetes Cluster
      rules:
        - ip_protocol: tcp
          from_port: 53
          to_port: 53
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 53
          to_port: 53
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 2379
          to_port: 2379
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 4001
          to_port: 4001
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 4789
          to_port: 4789
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 6443
          to_port: 6443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 6443
          to_port: 6443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 6783
          to_port: 6784
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 6783
          to_port: 6784
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 8285
          to_port: 8285
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 9090
          to_port: 9090
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 10250
          to_port: 10250
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 10255
          to_port: 10255
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 30000
          to_port: 40000
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 8285
          to_port: 8285
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  ssh_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: SSH Group
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  kubernetes_master_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_id }
      cidr_block:  N/A
      availability_zone:  N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A

  k8s_node:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: k8s_node_blue
          blueprint_archive: { get_input: ks_node_dep_archive }
          main_file_name: aws.yaml
        deployment:
          id: k8s_node_dep
          inputs:
            node_security_group: { get_attribute: [ kubernetes_security_group, aws_resource_id ] }
            node_ssh_group: { get_attribute: [ ssh_group, aws_resource_id ] }
            public_master_ip: { get_attribute: [ kubernetes_master_ip, aws_resource_id ] }
          outputs:
            deployment-type: deployment-type
            deployment-node-data-type: deployment-node-data-type

    relationships:
      - type: cloudify.relationships.depends_on
        target: k8s_master_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_security_group
      - type: cloudify.relationships.depends_on
        target: ssh_group
      - type: cloudify.relationships.depends_on
        target: kubernetes_setup_master

  k8s_load:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: k8s_lb_blue
          blueprint_archive: { get_input: ks_load_dep_archive }
          main_file_name: aws.yaml
        deployment:
          id: k8s_lb_dep
          inputs:
            node_security_group: { get_attribute: [ kubernetes_security_group, aws_resource_id ] }
            node_ssh_group: { get_attribute: [ ssh_group, aws_resource_id ] }
          outputs:
            deployment-type: deployment-type
            deployment-node-data-type: deployment-node-data-type

    relationships:
      - type: cloudify.relationships.depends_on
        target: k8s_master_host
      - type: cloudify.relationships.depends_on
        target: k8s_node
      - type: cloudify.relationships.depends_on
        target: kubernetes_security_group
      - type: cloudify.relationships.depends_on
        target: ssh_group
      - type: cloudify.relationships.depends_on
        target: kubernetes_setup_master

outputs:

  kubernetes_master_public_ip:
    value: { get_attribute: [ kubernetes_master_ip, aws_resource_id ] }
